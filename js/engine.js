// Generated by CoffeeScript 1.3.3
(function() {
  "use strict";

  var BAD_STAMINA_SE, CHECKPOINT, CHECKPOINTS, CHECKPOINTS_LENGTH, CHECKPOINT_FIRSTHALF, CHECKPOINT_SECONDHALF, FULLTIME, HALFTIME, KICKOFF, LOW_STAMINA, PR_ENUM_ROLE, REGEXP_FLOAT, SECONDHALF, SKILL_VALIDATION, SUBTOTALMINUTES, Staminia, VERSION, calculateStrength, getAdvancedSkill, getContributionAtMinute, getPlayerBonus, getSimpleSkill, minuteToCheckpoint, printContributionTable, validateSkill;

  window.Staminia = window.Staminia || {};

  Staminia = window.Staminia;

  Staminia.Engine = Staminia.Engine || {};

  VERSION = 5;

  KICKOFF = 1;

  HALFTIME = 45;

  SECONDHALF = 46;

  FULLTIME = 90;

  SUBTOTALMINUTES = 88;

  LOW_STAMINA = 0.46;

  REGEXP_FLOAT = /^\d+((\.|\,)\d+)?$/;

  CHECKPOINT = 5;

  CHECKPOINTS = [1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 81, 86];

  CHECKPOINTS_LENGTH = 18;

  CHECKPOINT_FIRSTHALF = 41;

  CHECKPOINT_SECONDHALF = 86;

  BAD_STAMINA_SE = [61, 71, 76, 86];

  SKILL_VALIDATION = {
    form: {
      min: 1,
      max: 8
    },
    stamina: {
      min: 1,
      max: 9
    },
    exp: {
      min: 0,
      max: 30
    },
    skill: {
      min: 0,
      max: 22
    },
    loyalty: {
      min: 1,
      max: 20
    }
  };

  PR_ENUM_ROLE = {
    0: "GK",
    1: "CD",
    2: "CD OFF",
    3: "CD TW",
    4: "WB",
    5: "WB OFF",
    6: "WB DEF",
    7: "WB TM",
    8: "IM",
    9: "IM OFF",
    10: "IM DEF",
    11: "IM TW",
    12: "WI",
    13: "WI OFF",
    14: "WI DEF",
    15: "WI TM",
    16: "FW",
    17: "FW DEF",
    18: "FW DEF+T",
    19: "FW TW"
  };

  $(function() {
    var AUTOSTART, DEBUG, FORM_ID, TABLE_ID;
    FORM_ID = Staminia.CONFIG.FORM_ID;
    TABLE_ID = Staminia.CONFIG.TABLE_ID;
    DEBUG = Staminia.CONFIG.DEBUG;
    AUTOSTART = Staminia.CONFIG.AUTOSTART;
  });

  window.arrayToString = function(substituteAtArray) {
    var check_with, l, minute, r, range, ranges, result, _i, _j, _len, _len1;
    if (!substituteAtArray.length) {
      return "";
    }
    ranges = [];
    r = 0;
    for (_i = 0, _len = substituteAtArray.length; _i < _len; _i++) {
      minute = substituteAtArray[_i];
      if (!ranges[r]) {
        ranges[r] = [];
        ranges[r].push(minute);
        check_with = minute + 1;
      } else if (minute !== check_with) {
        if (ranges[r][ranges[r].length - 1] !== check_with - 1) {
          ranges[r].push(check_with - 1);
        }
        r++;
        _i--;
      } else if (minute === check_with) {
        check_with = minute + 1;
      }
      if (_i === _len - 1) {
        l = ranges[r].length - 1;
        if (ranges[r][l] !== minute) {
          ranges[r].push(minute);
        }
      }
    }
    result = [];
    for (_j = 0, _len1 = ranges.length; _j < _len1; _j++) {
      range = ranges[_j];
      result.push(range.join("-"));
    }
    return result.join(",");
  };

  minuteToCheckpoint = function(minute) {
    if (minute === 1) {
      return 0;
    } else {
      return Math.floor((minute - 1) / CHECKPOINT) + 1;
    }
  };

  getContributionAtMinute = function(minute, stamina, startsAtMinute, pressing) {
    var currentCheckpoint, elapsedCheckpoints, elapsedMinutesAfterCheckpoint, energy, rest, startsAtCheckpoint, tirednessCoefficient;
    minute = Number(minute);
    stamina = Number(stamina);
    startsAtMinute = Number(startsAtMinute);
    if (stamina >= 9) {
      return 1;
    }
    currentCheckpoint = minuteToCheckpoint(minute);
    startsAtCheckpoint = minuteToCheckpoint(startsAtMinute);
    elapsedCheckpoints = minuteToCheckpoint(minute + startsAtMinute) - startsAtCheckpoint;
    elapsedMinutesAfterCheckpoint = 0;
    tirednessCoefficient = 0.05;
    if (pressing) {
      tirednessCoefficient = 0.05 * (1 + ((9 - stamina) / 9) / 6.5);
    }
    energy = 1 - (tirednessCoefficient * (elapsedCheckpoints + 1)) - (0.01 * elapsedMinutesAfterCheckpoint) + (0.05 * stamina);
    rest = Math.max(0.15, 0.05 * stamina);
    if ((startsAtMinute <= 45) && (minute + startsAtMinute > 45)) {
      energy += rest * (1 - (startsAtMinute / 44));
    }
    return Math.min(energy, 1);
  };

  calculateStrength = function(skill, form, stamina, experience, include_stamina) {
    var c_experience, c_form, c_stamina, result, tempHTML;
    skill = Number(skill);
    form = Math.max(0.5, Number(form));
    stamina = Number(stamina);
    experience = Math.max(0.5, Number(experience));
    c_form = Math.pow((form - 0.5) / 7, 0.45);
    c_stamina = Math.pow((stamina + 6.5) / 14, 0.6);
    c_experience = 1 + 0.0716 * Math.sqrt(experience - 0.5);
    result = skill * c_form * (include_stamina ? c_stamina : 1) * c_experience;
    if (Staminia.CONFIG.DEBUG) {
      tempHTML = "strength(skill = <b>" + skill + "</b>, form = <b>" + form + "</b>, stamina = <b>" + stamina + "</b>, experience = <b>" + experience + "</b>, include_stamina = <b>" + include_stamina + "</b>)<br/>\n&nbsp;&nbsp;c_form(<b>" + form + "</b>) = <b>" + c_form + "</b><br/>\n&nbsp;&nbsp;c_stamina(<b>" + stamina + "</b>) = <b>" + c_stamina + "</b><br/>\n&nbsp;&nbsp;c_experience(<b>" + experience + "</b>) = <b>" + c_experience + "</b><br/>\n&nbsp;&nbsp;result_w_stamina = <b>" + (skill * c_form * c_stamina * c_experience) + "</b><br/>\n&nbsp;&nbsp;result_wo_stamina = <b>" + (skill * c_form * 1 * c_experience) + "</b><br/>\n&nbsp;&nbsp;result = <b>" + result + "</b><br/><br/>";
      $("#tabDebug").append(tempHTML);
    }
    return result;
  };

  validateSkill = function(skill, type) {
    var max, min, parsedSkill;
    if (SKILL_VALIDATION[type] == null) {
      return 0;
    }
    min = SKILL_VALIDATION[type].min;
    max = SKILL_VALIDATION[type].max;
    parsedSkill = Number(skill.toString().replace(/,/g, "."));
    if (isNaN(parsedSkill) || parsedSkill < min) {
      return min;
    } else if (parsedSkill > max) {
      return max;
    } else {
      return parsedSkill;
    }
  };

  getPlayerBonus = function(loyalty, motherClubBonus) {
    var playerBonus, tempHTML;
    playerBonus = 0;
    if (motherClubBonus) {
      playerBonus += 0.5;
    }
    playerBonus += Math.max(0, loyalty - 1) / 19;
    if (Staminia.CONFIG.DEBUG) {
      tempHTML = "getPlayerBonus(loyalty = <b>" + loyalty + "</b>, motherClubBonus = <b>" + motherClubBonus + "</b>): <b>" + playerBonus + "</b><br/><br/>";
      $("#tabDebug").append(tempHTML);
    }
    return playerBonus;
  };

  getSimpleSkill = function(player) {
    var formReference, playerBonus, playerLoyalty, playerMotherClubBonus, playerSkill, tempHTML;
    formReference = $(Staminia.CONFIG.FORM_ID)[0];
    playerLoyalty = validateSkill(formReference["Staminia_Simple_Player_" + player + "_Loyalty"].value, "loyalty");
    playerMotherClubBonus = formReference["Staminia_Player_" + player + "_MotherClubBonus"].value === "true";
    playerBonus = getPlayerBonus(playerLoyalty, playerMotherClubBonus);
    playerSkill = validateSkill(formReference["Staminia_Simple_Player_" + player + "_MainSkill"].value, "skill");
    playerSkill += playerBonus;
    if (Staminia.CONFIG.DEBUG) {
      tempHTML = "getSimpleSkill(player = <b>" + player + "</b>): <b>" + playerSkill + "</b><br/><br/>";
      $("#tabDebug").append(tempHTML);
    }
    return playerSkill;
  };

  getAdvancedSkill = function(player) {
    var PR_ENUM_SKILL, debug_coeff, defending, defending_coeff, formReference, keeper, keeper_coeff, passing, passing_coeff, playerBonus, playerLoyalty, playerMotherClubBonus, playmaking, playmaking_coeff, position, scoring, scoring_coeff, tempHTML, total, winger, winger_coeff;
    formReference = $(Staminia.CONFIG.FORM_ID)[0];
    position = Number(formReference.Staminia_Advanced_Position.value);
    if (position < 0) {
      return 0;
    }
    playerLoyalty = validateSkill(formReference["Staminia_Advanced_Player_" + player + "_Loyalty"].value, "loyalty");
    playerMotherClubBonus = formReference["Staminia_Player_" + player + "_MotherClubBonus"].value === "true";
    playerBonus = getPlayerBonus(playerLoyalty, playerMotherClubBonus);
    keeper = validateSkill(formReference["Staminia_Advanced_Player_" + player + "_Skill_Keeper"].value, "skill") + playerBonus;
    defending = validateSkill(formReference["Staminia_Advanced_Player_" + player + "_Skill_Defending"].value, "skill") + playerBonus;
    playmaking = validateSkill(formReference["Staminia_Advanced_Player_" + player + "_Skill_Playmaking"].value, "skill") + playerBonus;
    winger = validateSkill(formReference["Staminia_Advanced_Player_" + player + "_Skill_Winger"].value, "skill") + playerBonus;
    passing = validateSkill(formReference["Staminia_Advanced_Player_" + player + "_Skill_Passing"].value, "skill") + playerBonus;
    scoring = validateSkill(formReference["Staminia_Advanced_Player_" + player + "_Skill_Scoring"].value, "skill") + playerBonus;
    PR_ENUM_SKILL = Staminia.CONFIG.PR_ENUM_SKILL;
    keeper_coeff = Staminia.predictions[position][PR_ENUM_SKILL.Keeper];
    defending_coeff = Staminia.predictions[position][PR_ENUM_SKILL.Defending];
    playmaking_coeff = Staminia.predictions[position][PR_ENUM_SKILL.Playmaking];
    winger_coeff = Staminia.predictions[position][PR_ENUM_SKILL.Winger];
    passing_coeff = Staminia.predictions[position][PR_ENUM_SKILL.Passing];
    scoring_coeff = Staminia.predictions[position][PR_ENUM_SKILL.Scoring];
    total = keeper_coeff * keeper + defending_coeff * defending + playmaking_coeff * playmaking + winger_coeff * winger + passing_coeff * passing + scoring_coeff * scoring;
    if (Staminia.CONFIG.DEBUG) {
      debug_coeff = keeper_coeff + defending_coeff + playmaking_coeff + winger_coeff + passing_coeff + scoring_coeff;
      tempHTML = "getAdvancedSkill(player = <b>" + player + "</b>)<br/>\n&nbsp;&nbsp;Position: <b>" + PR_ENUM_ROLE[position] + "</b><br/>\n&nbsp;&nbsp;Keeper: <b>" + (Staminia.number_format(keeper_coeff * 100, 2)) + "</b>% * <b>" + keeper + "</b><br/>\n&nbsp;&nbsp;Defending: <b>" + (Staminia.number_format(defending_coeff * 100, 2)) + "</b>% * <b>" + defending + "</b><br/>\n&nbsp;&nbsp;Playmaking: <b>" + (Staminia.number_format(playmaking_coeff * 100, 2)) + "</b>% * <b>" + playmaking + "</b><br/>\n&nbsp;&nbsp;Winger: <b>" + (Staminia.number_format(winger_coeff * 100, 2)) + "</b>% * <b>" + winger + "</b><br/>\n&nbsp;&nbsp;Passing: <b>" + (Staminia.number_format(passing_coeff * 100, 2)) + "</b>% * <b>" + passing + "</b><br/>\n&nbsp;&nbsp;Scoring: <b>" + (Staminia.number_format(scoring_coeff * 100, 2)) + "</b>% * <b>" + scoring + "</b><br/>\nExpected (if all skills = 1.00): <b>" + debug_coeff + "</b><br/>\nCalculated: <b>" + total + "</b><br/>\nMatch: <b>" + (total === debug_coeff) + "</b><br/><br/>";
      $("#tabDebug").append(tempHTML);
    }
    return total;
  };

  printContributionTable = function() {
    var DEBUG_STEP, addBorder, borderBadStamina, i, j, tableHeader, tempHTML;
    tableHeader = function(header) {
      return "<table class=\"table table-striped table-bordered table-condensed table-staminia table-staminia-debug width-auto\">\n  <thead>\n    <tr>\n      <th colspan=\"10\">\n        Contribution Table (" + header + "Minute/Stamina)\n      </th>\n    </tr>\n    <tr>\n      <th></th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th>\n    </tr>\n  </thead>\n  <tbody>";
    };
    tempHTML = tableHeader("");
    i = KICKOFF;
    borderBadStamina = "style=\"background: #e0cccc\"";
    DEBUG_STEP = Staminia.CONFIG.DEBUG_STEP;
    while (i <= FULLTIME) {
      tempHTML += "<tr>";
      tempHTML += "  <td><b>" + i + "</b></td>";
      j = 1;
      while (j <= 9) {
        addBorder = false;
        if (j <= 4) {
          addBorder = BAD_STAMINA_SE[j - 1] === i;
        }
        tempHTML += "<td " + (addBorder ? borderBadStamina : void 0) + ">\n  " + (Staminia.number_format(getContributionAtMinute(i, j, 0, false), 2)) + "\n</td>";
        j++;
      }
      tempHTML += "</tr>";
      if (i === HALFTIME) {
        tempHTML += "<tr class=\"separator\">\n  <td colspan=\"10\"></td>\n</tr>";
      }
      i += DEBUG_STEP;
    }
    tempHTML += "</tbody></table>";
    return $("#tabDebug").append(tempHTML);
  };

  Staminia.Engine.start = function() {
    var contributionPercent, doNotReplace, formReference, isMax, isMin, max, min, minute, p1LowStaminaRisk, p1PlayedMinutes, p1_minute, p2LowStaminaRisk, p2PlayedMinutes, p2_minute, player1AVGArray, player1CurrentContribution, player1Experience, player1Form, player1LowStamina, player1Skill, player1Stamina, player1Strength, player1StrengthStaminaIndependent, player1TotalContribution, player2AVGArray, player2CurrentContribution, player2Experience, player2Form, player2LowStamina, player2Skill, player2Stamina, player2Strength, player2StrengthStaminaIndependent, player2TotalContribution, pressing, substituteAtArray, tableHeader, tableSeparator, tempHTML, totalContributionArray, warnings, _i, _j, _k, _l, _m, _ref;
    $("#tabDebug").html("");
    $("#tabContributions").html("");
    $(".alert").alert("close");
    formReference = $(Staminia.CONFIG.FORM_ID)[0];
    if (Staminia.isAdvancedModeEnabled()) {
      player1Form = validateSkill(formReference.Staminia_Advanced_Player_1_Form.value, "form");
      player2Form = validateSkill(formReference.Staminia_Advanced_Player_2_Form.value, "form");
      player1Stamina = validateSkill(formReference.Staminia_Advanced_Player_1_Stamina.value, "stamina");
      player2Stamina = validateSkill(formReference.Staminia_Advanced_Player_2_Stamina.value, "stamina");
      player1Experience = validateSkill(formReference.Staminia_Advanced_Player_1_Experience.value, "exp");
      player2Experience = validateSkill(formReference.Staminia_Advanced_Player_2_Experience.value, "exp");
      player1Skill = getAdvancedSkill(1);
      player2Skill = getAdvancedSkill(2);
    } else {
      player1Form = validateSkill(formReference.Staminia_Simple_Player_1_Form.value, "form");
      player2Form = validateSkill(formReference.Staminia_Simple_Player_2_Form.value, "form");
      player1Stamina = validateSkill(formReference.Staminia_Simple_Player_1_Stamina.value, "stamina");
      player2Stamina = validateSkill(formReference.Staminia_Simple_Player_2_Stamina.value, "stamina");
      player1Experience = validateSkill(formReference.Staminia_Simple_Player_1_Experience.value, "exp");
      player2Experience = validateSkill(formReference.Staminia_Simple_Player_2_Experience.value, "exp");
      player1Skill = getSimpleSkill(1);
      player2Skill = getSimpleSkill(2);
    }
    player1Strength = calculateStrength(player1Skill, player1Form, player1Stamina, player1Experience, true);
    player2Strength = calculateStrength(player2Skill, player2Form, player2Stamina, player2Experience, true);
    player1StrengthStaminaIndependent = calculateStrength(player1Skill, player1Form, player1Stamina, player1Experience, false);
    player2StrengthStaminaIndependent = calculateStrength(player2Skill, player2Form, player2Stamina, player2Experience, false);
    warnings = "";
    if (player2Strength > player1Strength) {
      warnings += "<li>" + Staminia.messages.warning_p2_stronger_than_p1 + "</li>";
    }
    if (Staminia.isVerboseModeEnabled()) {
      tempHTML = "<h3 class=\"legend-like\">" + Staminia.messages.strength_table + "</h3>\n<table class=\"table table-striped table-condensed table-staminia table-staminia-strength width-auto\">\n  <thead>\n    <tr>\n      <th></th><th>" + Staminia.messages.player1 + "</th><th>" + Staminia.messages.player2 + "</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>" + Staminia.messages.strength + "</td>\n      <td>" + (Staminia.number_format(player1Strength, 2)) + "</td>\n      <td>" + (Staminia.number_format(player2Strength, 2)) + "</td>\n    </tr>\n    <tr>\n      <td>" + Staminia.messages.strength_st_independent + "</td>\n      <td>" + (Staminia.number_format(player1StrengthStaminaIndependent, 2)) + "</td>\n      <td>" + (Staminia.number_format(player2StrengthStaminaIndependent, 2)) + "</td>\n    </tr>\n  </tbody>\n</table>\n<p><small>" + Staminia.messages.used_in_calculation + "</small></p>";
      $("#tabContributions").append(tempHTML);
    }
    player1TotalContribution = 0;
    player2TotalContribution = 0;
    player1LowStamina = -1;
    player2LowStamina = -1;
    pressing = Staminia.isPressingEnabled();
    player1AVGArray = [];
    player2AVGArray = [];
    for (p1_minute = _i = KICKOFF; KICKOFF <= FULLTIME ? _i <= FULLTIME : _i >= FULLTIME; p1_minute = KICKOFF <= FULLTIME ? ++_i : --_i) {
      if (!(p1_minute !== HALFTIME)) {
        continue;
      }
      p1PlayedMinutes = p1_minute;
      if (p1_minute > HALFTIME) {
        --p1PlayedMinutes;
      }
      player1CurrentContribution = getContributionAtMinute(p1_minute, player1Stamina, 0, pressing);
      player2TotalContribution = 0;
      for (p2_minute = _j = 0, _ref = FULLTIME - p1_minute; 0 <= _ref ? _j < _ref : _j > _ref; p2_minute = 0 <= _ref ? ++_j : --_j) {
        if (!(p2_minute !== HALFTIME)) {
          continue;
        }
        p2PlayedMinutes = SUBTOTALMINUTES - p1_minute + 1;
        if (p1_minute > HALFTIME) {
          ++p2PlayedMinutes;
        }
        player2CurrentContribution = getContributionAtMinute(p2_minute, player2Stamina, p1_minute, pressing);
        player2TotalContribution += player2CurrentContribution;
        if (player2LowStamina < 0 && player2CurrentContribution < LOW_STAMINA) {
          player2LowStamina = FULLTIME - p2_minute;
        }
      }
      player2AVGArray[p1_minute] = player2TotalContribution / p2PlayedMinutes;
      player1TotalContribution += player1CurrentContribution;
      player1AVGArray[p1_minute] = player1TotalContribution / p1PlayedMinutes;
      if (player1LowStamina < 0 && player1CurrentContribution < LOW_STAMINA) {
        player1LowStamina = p1_minute;
      }
    }
    player1AVGArray[0] = 0;
    player1AVGArray[45] = player1AVGArray[44];
    player1TotalContribution = 0;
    player2TotalContribution = 0;
    max = -Infinity;
    min = +Infinity;
    totalContributionArray = [];
    for (minute = _k = KICKOFF; KICKOFF <= FULLTIME ? _k <= FULLTIME : _k >= FULLTIME; minute = KICKOFF <= FULLTIME ? ++_k : --_k) {
      if (!(minute !== HALFTIME)) {
        continue;
      }
      p1PlayedMinutes = minute - 1;
      if (minute > HALFTIME) {
        --p1PlayedMinutes;
      }
      p2PlayedMinutes = SUBTOTALMINUTES - minute + 1;
      if (minute > HALFTIME) {
        ++p2PlayedMinutes;
      }
      totalContributionArray[minute] = player1AVGArray[minute - 1] * player1StrengthStaminaIndependent * (p1PlayedMinutes / SUBTOTALMINUTES);
      totalContributionArray[minute] += player2AVGArray[minute] * player2StrengthStaminaIndependent * (p2PlayedMinutes / SUBTOTALMINUTES);
      totalContributionArray[minute] = Number(Staminia.number_format(totalContributionArray[minute], 2));
      if (totalContributionArray[minute] > max) {
        max = totalContributionArray[minute];
      }
      if (totalContributionArray[minute] < min) {
        min = totalContributionArray[minute];
      }
    }
    if (max === min) {
      min = -1;
    }
    if (Staminia.isVerboseModeEnabled()) {
      tableHeader = "<thead>\n  <tr>\n    <th>" + Staminia.messages.substitution_minute + "</th>\n    <th>" + Staminia.messages.total_contribution + "</th>\n    <th>" + Staminia.messages.contribution_percent + "</th>\n    <th>" + Staminia.messages.p1_contrib + "</th>\n    <th>" + Staminia.messages.p2_contrib + "</th>\n    <th>" + Staminia.messages.notes + "</th>\n  </tr>\n</thead>";
      tableSeparator = "<tr><td colspan='6'></td></tr>";
      tempHTML = "<h3 class=\"legend-like\">" + Staminia.messages.contribution_table + "</h3>\n<table class=\"table table-striped table-condensed table-staminia table-staminia-contributions width-auto\">\n  <thead>\n  </thead>\n    " + tableHeader + "\n  </thead>\n  <tbody>";
      for (minute = _l = KICKOFF; KICKOFF <= FULLTIME ? _l <= FULLTIME : _l >= FULLTIME; minute = KICKOFF <= FULLTIME ? ++_l : --_l) {
        if (minute === HALFTIME) {
          tempHTML += tableHeader;
          continue;
        }
        p1PlayedMinutes = minute - 1;
        if (minute > HALFTIME) {
          --p1PlayedMinutes;
        }
        p2PlayedMinutes = SUBTOTALMINUTES - minute + 1;
        if (minute > HALFTIME) {
          ++p2PlayedMinutes;
        }
        isMax = totalContributionArray[minute] === max;
        isMin = totalContributionArray[minute] === min;
        contributionPercent = totalContributionArray[minute] / max * 100;
        tempHTML += "<tr class=\"" + ((isMax ? " max" : "") + (isMin ? " min" : "")) + "\">\n  <td>" + minute + "</td>\n  <td>" + (Staminia.number_format(totalContributionArray[minute], 2)) + "</td>\n  <td>" + (Staminia.number_format(contributionPercent, 2)) + "%</td>\n  <td>" + (Staminia.number_format(player1AVGArray[minute - 1] * player1StrengthStaminaIndependent * (p1PlayedMinutes / SUBTOTALMINUTES), 2)) + "</td>\n  <td>" + (Staminia.number_format(player2AVGArray[minute] * player2StrengthStaminaIndependent * (p2PlayedMinutes / SUBTOTALMINUTES), 2)) + "</td>\n  <td>" + ((isMax ? "MAX" : (isMin ? "MIN" : (100 - contributionPercent < 1 ? "~ 1%" : ""))) + (minute === player1LowStamina ? " " + Staminia.messages.p1_bad_stamina : "") + (minute === player2LowStamina ? " " + Staminia.messages.p2_bad_stamina : "")) + "</td>\n</tr>";
      }
      tempHTML += "</tbody></table>";
      $("#tabContributions").append(tempHTML);
    }
    substituteAtArray = [];
    for (minute = _m = KICKOFF; KICKOFF <= FULLTIME ? _m <= FULLTIME : _m >= FULLTIME; minute = KICKOFF <= FULLTIME ? ++_m : --_m) {
      if (!(minute !== HALFTIME)) {
        continue;
      }
      if (totalContributionArray[minute] === max) {
        if (minute === FULLTIME) {
          doNotReplace = true;
        } else {
          substituteAtArray.push(minute);
        }
      }
      if (player1LowStamina > 0 && minute >= player1LowStamina) {
        p1LowStaminaRisk = true;
      }
      if (player2LowStamina > 0 && minute <= player2LowStamina) {
        p2LowStaminaRisk = true;
      }
    }
    if (p1LowStaminaRisk) {
      warnings += "<li>" + (Staminia.messages.warning_p1_stamina_se(player1LowStamina)) + "</li>";
    }
    if (p2LowStaminaRisk) {
      warnings += "<li>" + (Staminia.messages.warning_p2_stamina_se(player2LowStamina)) + "</li>";
    }
    if (warnings !== "") {
      $('#AlertsContainer').append(Staminia.createAlert({
        "id": "formWarnings",
        "type": "warning",
        "title": Staminia.messages.status_warning,
        "body": "<ul>" + warnings + "</ul>"
      }));
    }
    if (Staminia.isVerboseModeEnabled()) {
      $("#tabContributionsNav").show();
      $("#tabContributionsNav").find("a").tab("show");
    }
    if (Staminia.CONFIG.DEBUG_STEP) {
      printContributionTable();
      return $("#tabDebugNav").show();
    }
  };

  /*
    printAVGContributionTable = ->
      tempHTML = "<table class=\"StaminiaTable hAlignCenter vAlignCenter zebra\"><tr><th colspan=\"10\">AVG Contribution Table (Minute/Stamina)</th></tr><tr><td></td><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr>"
      avgContributionArray = []
      totalContributionArray = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      playedMinutes = 1
      i = KICKOFF
  
      while i <= FULLTIME
        if i is HALFTIME
          tempHTML += "<tr>"
          tempHTML += "<th>E</th>"
          engel = [ 0.79, 0.79, 0.86, 0.91, 0.96, 0.95, 0, 0, 0 ]
          lizard = [ 0.0, 0.0, 0.87, 0.0, 0.94, 0.97, 0.99, 1, 0 ]
          j = 0
  
          while j <= 8
            tempHTML += "<td>"
            tempHTML += number_format(engel[j], 2, ",")
            tempHTML += "</td>"
            j++
          tempHTML += "</tr>"
          tempHTML += "<tr>"
          tempHTML += "<th>L</th>"
          j = 0
  
          while j <= 8
            tempHTML += "<td>"
            tempHTML += number_format(lizard[j], 2, ",")
            tempHTML += "</td>"
            j++
          tempHTML += "<tr class=\"separator\"><th colspan=\"10\"></th></tr>"
          continue
        j = 1
  
        while j <= 9
          avgContributionArray[j] = getContributionAtMinute(i, j, 0, false)
          totalContributionArray[j] += avgContributionArray[j]
          ++j
        tempHTML += "<tr>"
        tempHTML += "<th>" + i + "</th>"
        j = 1
  
        while j <= 9
          tempHTML += "<td>"
          tempHTML += number_format(totalContributionArray[j] / playedMinutes, 3, ",")
          tempHTML += "</td>"
          j++
        tempHTML += "</tr>"
        ++playedMinutes
        i += DEBUG_STEP
      tempHTML += "<tr>"
      tempHTML += "<th>E</th>"
      engel = [ 0.65, 0.68, 0.73, 0.80, 0.90, 0.91, 0, 0, 0 ]
      lizard = [ 0.0, 0.67, 0.73, 0.82, 0.85, 0.91, 0.95, 0.98, 1 ]
      j = 0
  
      while j <= 8
        tempHTML += "<td>"
        tempHTML += number_format(engel[j], 2, ",")
        tempHTML += "</td>"
        j++
      tempHTML += "</tr>"
      tempHTML += "<tr>"
      tempHTML += "<th>L</th>"
      j = 0
  
      while j <= 8
        tempHTML += "<td>"
        tempHTML += number_format(lizard[j], 2, ",")
        tempHTML += "</td>"
        j++
      tempHTML += "</tr>"
      tempHTML += "</table><br/>"
      $("#tabDebug").append tempHTML
      tempHTML = "<table class=\"StaminiaTable hAlignCenter vAlignCenter zebra\"><tr><th colspan=\"10\">Pressing impact (Minute/Stamina)</th></tr><tr><td></td><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr>"
      avgContributionArray = []
      avgContributionArrayPressing = []
      totalContributionArray = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      totalContributionArrayPressing = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      i = KICKOFF
  
      while i <= FULLTIME
        j = 1
  
        while j <= 9
          avgContributionArray[j] = getContributionAtMinute(i, j, 0, false)
          totalContributionArray[j] += avgContributionArray[j]
          avgContributionArrayPressing[j] = getContributionAtMinute(i, j, 0, true)
          totalContributionArrayPressing[j] += avgContributionArrayPressing[j]
          ++j
        unless i % DEBUG_STEP
          tempHTML += "<tr>"
          tempHTML += "<th>" + i + "</th>"
          j = 1
  
          while j <= 9
            tempHTML += "<td>"
            tempHTML += number_format((totalContributionArray[j] / (i)) - (totalContributionArrayPressing[j] / (i)) * 100) + "%"
            tempHTML += "</td>"
            j++
        tempHTML += "</tr>"
        tempHTML += "<tr class=\"separator\"><th colspan=\"10\"></th></tr>"  if i is HALFTIME
        ++i
      tempHTML += "</table><br/>"
      $("#tabDebug").append tempHTML
      
      
      for i of CHECKPOINTS
        checkpoint = CHECKPOINTS[i]
        player1CurrentContribution = getContributionAtMinute(checkpoint, player1Stamina, 0, true)
        player2CurrentContribution = getContributionAtMinute(checkpoint, player2Stamina, 0, true)
        player1TotalContribution += player1CurrentContribution
        player2TotalContribution += player2CurrentContribution
        player1AVGArrayPressing[i] = player1TotalContribution / (parseInt(i) + 1)
        player2AVGArrayPressing[i] = player2TotalContribution / (parseInt(i) + 1)
      if DEBUG
        tempHTML = ""
        printContributionTable()
        printAVGContributionTable()
        tempHTML += "<table class=\"StaminiaTable hAlignCenter vAlignCenter zebra\"><tr><th colspan=\"10\">Contribution at minute</th></tr><tr><td></td><th>Player 1</th><th>Player 2</th></tr>"
        for i of CHECKPOINTS
          checkpoint = CHECKPOINTS[i]
          tempHTML += "<tr>"
          tempHTML += "<th>" + checkpoint + "</th>"
          tempHTML += "<td>" + number_format(getContributionAtMinute(checkpoint, player1Stamina, 0, false) * player1StrengthStaminaIndependent) + "</td>"
          tempHTML += "<td>" + number_format(getContributionAtMinute(checkpoint, player2Stamina, 0, false) * player2StrengthStaminaIndependent) + "</td>"
          tempHTML += "</tr>"
          tempHTML += "<tr class=\"separator\"><th colspan=\"10\"></th></tr>"  if checkpoint is CHECKPOINT_FIRSTHALF
        tempHTML += "</table><br/>"
        tempHTML += "<table class=\"StaminiaTable hAlignCenter vAlignCenter zebra\"><tr><th colspan=\"10\">AVG contribution at minute</th></tr><tr><td></td><th>Player 1</th><th>Player 2</th></tr>"
        for i of CHECKPOINTS
          checkpoint = CHECKPOINTS[i]
          tempHTML += "<tr>"
          tempHTML += "<th>" + checkpoint + "</th>"
          tempHTML += "<td>" + number_format(player1AVGArray[i] * player1StrengthStaminaIndependent) + "</td>"
          tempHTML += "<td>" + number_format(player2AVGArray[i] * player2StrengthStaminaIndependent) + "</td>"
          tempHTML += "</tr>"
          tempHTML += "<tr class=\"separator\"><th colspan=\"10\"></th></tr>"  if checkpoint is CHECKPOINT_FIRSTHALF
        tempHTML += "</table><br/>"
        tempHTML += "<table class=\"StaminiaTable hAlignCenter vAlignCenter zebra\"><tr><th colspan=\"10\">Pressing AVG contribution at minute</th></tr><tr><td></td><th>Player 1</th><th>Player 2</th></tr>"
        for i of CHECKPOINTS
          checkpoint = CHECKPOINTS[i]
          tempHTML += "<tr>"
          tempHTML += "<th>" + checkpoint + "</th>"
          tempHTML += "<td>" + number_format(player1AVGArrayPressing[i] * player1StrengthStaminaIndependent) + "</td>"
          tempHTML += "<td>" + number_format(player2AVGArrayPressing[i] * player2StrengthStaminaIndependent) + "</td>"
          tempHTML += "</tr>"
          tempHTML += "<tr class=\"separator\"><th colspan=\"10\"></th></tr>"  if checkpoint is CHECKPOINT_FIRSTHALF
        tempHTML += "</table><br/>"
        tempHTML += "<table class=\"StaminiaTable hAlignCenter vAlignCenter zebra\"><tr><th colspan=\"10\">Pressing Difference</th></tr><tr><td></td><th>Player 1</th><th>Player 2</th></tr>"
        for i of CHECKPOINTS
          checkpoint = CHECKPOINTS[i]
          tempHTML += "<tr>"
          tempHTML += "<th>" + checkpoint + "</th>"
          tempHTML += "<td>" + number_format((player1AVGArrayPressing[i] * player1StrengthStaminaIndependent) / (player1AVGArray[i] * player1StrengthStaminaIndependent) * 100) + "%</td>"
          tempHTML += "<td>" + number_format((player2AVGArrayPressing[i] * player2StrengthStaminaIndependent) / (player2AVGArray[i] * player2StrengthStaminaIndependent) * 100) + "%</td>"
          tempHTML += "</tr>"
          tempHTML += "<tr class=\"separator\"><th colspan=\"10\"></th></tr>"  if checkpoint is CHECKPOINT_FIRSTHALF
        tempHTML += "</table><br/>"
        tempHTML += "<b>Debug color scale:</b><br/>MIN "
        i = 127
  
        while i < 256
          tempHTML += "<span style=\"background: #" + (382 - i).toString(16) + i.toString(16) + "00;\">&nbsp;</span>"
          i += 5
        tempHTML += " MAX<br/><br/>"
        $("#tabDebug").append tempHTML
      i = KICKOFF
  
      while i <= FULLTIME
        continue  if i is HALFTIME
        p1PlayedMinutes = i - 1
        --p1PlayedMinutes  if i > HALFTIME
        p2PlayedMinutes = SUBTOTALMINUTES - i + 1
        ++p2PlayedMinutes  if i > HALFTIME
        totalContributionArray[i] = player1AVGArray[i - 1] * player1StrengthStaminaIndependent * (p1PlayedMinutes / SUBTOTALMINUTES)
        totalContributionArray[i] += player2AVGArray[i] * player2StrengthStaminaIndependent * (p2PlayedMinutes / SUBTOTALMINUTES)
        totalContributionArray[i] = parseFloat(number_format(totalContributionArray[i]))
        max = totalContributionArray[i]  if totalContributionArray[i] > max
        min = totalContributionArray[i]  if totalContributionArray[i] < min
        ++i
      min = -1  if max is min
      if verbose
        tableHeader = "<tr><td class=\"hidden\"></td><th>" + STRINGS["TOTAL_CONTRIBUTION"] + "</th><th>" + STRINGS["CONTRIBUTION_%"] + "</th><th class=\"player1\">" + STRINGS["P1_CONTRIB"] + "</th><th class=\"player2\">" + STRINGS["P2_CONTRIB"] + "</th><th>" + STRINGS["NOTES"] + "</th></tr>"
        tableSeparator = "<tr class=\"separator\"><th colspan=\"6\"></th></tr>"
        tempHTML = "<table class=\"StaminiaTable vAlignCenter hAlignCenter zebra\"><tr><th colspan=\"6\">" + STRINGS["CONTRIBUTION_TABLE"] + "</th></tr>" + tableHeader
        graphBar = ""
        i = KICKOFF
  
        while i <= FULLTIME
          if i is HALFTIME
            tempHTML += tableHeader
            continue
          p1PlayedMinutes = i - 1
          --p1PlayedMinutes  if i > HALFTIME
          p2PlayedMinutes = SUBTOTALMINUTES - i + 1
          ++p2PlayedMinutes  if i > HALFTIME
          red_tone = 127 + Math.floor((max - totalContributionArray[i]) / (max - min) * 128)
          red_tone = red_tone.toString(16)
          red_tone = "0" + "" + red_tone  if red_tone.length is 1
          green_tone = 127 + Math.floor((totalContributionArray[i] - min) / (max - min) * 128)
          green_tone = green_tone.toString(16)
          green_tone = "0" + "" + green_tone  if green_tone.length is 1
          isMax = (totalContributionArray[i] is max)
          isMin = (totalContributionArray[i] is min)
          contributionPercent = totalContributionArray[i] / max * 100
          tempHTML += "<tr class=\"" + (if isMax then " max" else "") + (if isMin then " min" else "") + "\">"
          tempHTML += "<th>" + i + "</th>"
          tempHTML += "<td style=\"background: #" + red_tone + green_tone + "00; font-weight: bold;\">" + number_format(totalContributionArray[i]) + "</td>"
          tempHTML += "<td>" + number_format(contributionPercent) + "%</td>"
          tempHTML += "<td>" + number_format(player1AVGArray[i - 1] * player1StrengthStaminaIndependent * (p1PlayedMinutes / SUBTOTALMINUTES)) + "</td>"
          tempHTML += "<td>" + number_format(player2AVGArray[i] * player2StrengthStaminaIndependent * (p2PlayedMinutes / SUBTOTALMINUTES)) + "</td>"
          tempHTML += "<td>" + (if isMax then "MAX" else (if isMin then "MIN" else (if 100 - contributionPercent < 1 then "~ 1%" else ""))) + (if i is player1LowStamina then " " + STRINGS["P1_BAD_STAMINA"] else "") + (if i is player2LowStamina then " " + STRINGS["P2_BAD_STAMINA"] else "") + "</td></tr>"
          ++i
        tempHTML += "</td></tr></table><br/>"
        $("#verbose").append tempHTML
      lowStaminaSERiskP1 = false
      lowStaminaSERiskP2 = false
      i = KICKOFF
  
      while i <= FULLTIME
        continue  if i is HALFTIME
        if totalContributionArray[i] is max
          if i is FULLTIME
            doNotReplace = true
          else
            substituteAtArray.push i
          lowStaminaSERiskP1 = true  if player1LowStamina > 0 and i >= player1LowStamina
          lowStaminaSERiskP2 = true  if player2LowStamina > 0 and i <= player2LowStamina
        ++i
      if lowStaminaSERiskP1
        warning = document.createElement("span")
        warning.setAttribute "class", "notice"
        warning.innerHTML = sprintf(STRINGS["WARNING_P1_STAMINA"], player1LowStamina)
        warningArray.push warning
      if lowStaminaSERiskP2
        warning = document.createElement("span")
        warning.setAttribute "class", "notice"
        warning.innerHTML = sprintf(STRINGS["WARNING_P2_STAMINA"], player2LowStamina)
        warningArray.push warning
      for i of warningArray
        $("#result").append warningArray[i]
      resultString = ""
      if substituteAtArray.length > 0
        resultString = STRINGS["REPLACE"] + " " + (if substituteAtArray.length is 1 then STRINGS["AT_MINUTE"] else STRINGS["AT_MINUTES"]) + " "
        resultString += ArrayToString(substituteAtArray)
        if doNotReplace
          resultString += " "
          resultString += STRINGS["MAY_NOT_REPLACE"]
      else
        resultString = STRINGS["DO_NOT_REPLACE"]
      $(resultSpan).addClass "success"
      $(resultSpan).text resultString
      $("#result").append resultSpan
      $("#result").fadeIn()
      $("#warnings").show()
      $("#tabDebug").show()  if DEBUG
      $("#verbose").show()  if verbose
      if formReference.Staminia_Options_Charts.checked
        $("#charts").show()
        JQPLOT_GRID = [ 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 81, 86, 89 ]
        plotData = []
        plotData[0] = []
        plotData[1] = []
        plotData[2] = []
        plotIndex = 0
        i = KICKOFF
  
        while i < FULLTIME
          continue  if i is HALFTIME
          plotData[0][plotIndex] = [ i, totalContributionArray[i] ]
          plotData[1][plotIndex] = [ i, player1AVGArray[i] * player1StrengthStaminaIndependent ]
          plotData[2][plotIndex] = [ i, player2AVGArray[i] * player2StrengthStaminaIndependent ]
          ++plotIndex
          ++i
        $.jqplot "chartTotal", plotData,
          title:
            text: STRINGS["TOTAL_CONTRIBUTION"]
  
          axesDefaults:
            labelRenderer: $.jqplot.CanvasAxisLabelRenderer
            labelOptions:
              fontSize: "8pt"
  
          axes:
            xaxis:
              label: STRINGS["MINUTE"]
              pad: 0
              tickOptions:
                formatString: "%d"
  
              ticks: JQPLOT_GRID
  
            yaxis:
              min: min * 0.99
              max: max * 1.01
              label: STRINGS["CONTRIBUTION"]
              tickOptions:
                formatString: "%.2f"
  
          highlighter:
            show: true
            sizeAdjust: 7.5
  
          legend:
            show: false
            location: "s"
  
          series: [
            label: "test"
            color: "#01158F"
          ,
            show: false
            color: "#A51107"
          ,
            show: false
            color: "#158F01"
           ]
  
        $.jqplot "chartPartial", plotData,
          title:
            text: STRINGS["PARTIAL_CONTRIBUTIONS"]
  
          axesDefaults:
            labelRenderer: $.jqplot.CanvasAxisLabelRenderer
            labelOptions:
              fontSize: "8pt"
  
          axes:
            xaxis:
              label: STRINGS["MINUTE"]
              pad: 0
              tickOptions:
                formatString: "%d"
  
              ticks: JQPLOT_GRID
  
            yaxis:
              autoscale: true
              label: STRINGS["CONTRIBUTION"]
              tickOptions:
                formatString: "%.2f"
  
          highlighter:
            show: true
            sizeAdjust: 7.5
  
          legend:
            show: true
            location: "se"
  
          series: [
            label: "test"
            color: "#01158F"
            show: false
          ,
            label: STRINGS["P1_CONTRIB"]
            color: "#A51107"
          ,
            label: STRINGS["P2_CONTRIB"]
            color: "#158F01"
           ]
      $("#calculate").removeAttr "disabled"
      timerEnd = new Date()
      elapsedTime = timerEnd - timerStart
      $("#elapsedTime").html "Elapsed Time: <b>" + elapsedTime + "</b>ms"
      $("#elapsedTime").show()
      return
  
    pub = {}
    pub.pageLoaded = pageLoaded
    pub.fillCHPPForm = fillCHPPForm
    pub.setLocale = setLocale
    pub.showSkillsByPosition = showSkillsByPosition
    pub
  )()
  */


}).call(this);
